import kotlin.math.*

fun main() {
    // Binary operators
    /**
     * Бинарные операторы принимают два значения в качестве операндов.
     * Операнд — это значение или переменная, к которой применяется оператор.
     * Например, в выражении 1 + 3 1 и 3 — операнды, а + — оператор.
     *
     * Сложение +
     * Вычитание -
     * Умножение *
     * Деление /
     * Остаток от деления %
     */
    println(13 + 25) // 38
    println(20 + 70) // 90

    println(70 - 30) // 40
    println(30 - 70) // -40

    println(21 * 3)  // 63
    println(20 * 10) // 200

    println(8 / 3)  // 2
    println(-8 / 3)  // -2, т.к. исходно Int
    println((-8).toDouble() / 3.toDouble())  // -2.66666666665
    println(-8.0 / 3.0)  // -2.66666666665
    println(-8f / 3f)  // -2.6666667
    println(41 / 5) // 8
    println(41 / -5) // -8, т.к. исходно Int
    println((41).toDouble() / (-5).toDouble()) // -8,2
    println(8.78 / 3.97)  // 2.2115869017632237
    println(8.78 / 3)  // 2.9266666666666663

    println(10 % 3) // 1
    println(12 % 4) // 0

    println(1 + 3 * 4 - 2) // 11
    println((1 + 3) * (4 - 2)) // 8

    // Unary operators
    println(+5) // 5
    println(+(-5)) // -5

    println(-8)  // -8
    println(-(100 + 4)) // -104

    // Приоритеты
    /**
     * 1. Скобки
     * 2. Унарные операторы (знаки -, +)
     * 3. Умножение, деление, остаток от деления
     * 4. Сложение, вычитание
     */

    mathLibrary()

    sumOfDigits()
    timeDifference()
}

/**
 * Docs: https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/
 *
 * Подключение всех функций: import kotlin.math.*
 * Подключение конкретной функции: import kotlin.math.pow
 *
 * Следующие функции работают с типами Int, Long, Float и Double (оба a и b должны быть одного типа):
 *
 * - abs(n) - возвращает абсолютное значение своего аргумента
 *
 * - min(a, b) - возвращает меньшее значение из двух аргументов
 *
 * - max(a, b) - возвращает большее значение двух аргументов
 *
 * - x.pow(n) - возвращает значение x, возведенное в степень n, где x может иметь значение Float или Double, а n может быть Int, Long, Float или Double.
 *
 * Работают с типами Float и Double:
 *
 * - sqrt(x) - возвращает квадратный корень своего аргумента
 *
 * - exp(x) - возвращает экспоненциальную функцию от x
 *
 * - ln(x) - возвращает натуральный логарифм x
 *
 * - log(x, base) - возвращает логарифм x по основанию
 *
 * - sin(x) - возвращает тригонометрический синус заданного угла в радианах
 *
 * - cos(x) - возвращает тригонометрический косинус заданного угла в радианах
 *
 * - tan(x) - возвращает тригонометрический тангенс заданного угла в радианах
 *
 * - hypot(a, b) - вычисление гипотенузы треугольника
 *
 * - floor(x) - возвращает наибольшее значение Double, которое меньше или равно его аргументу и равно целому числу (округление к меньшему)
 *
 * - ceil(x) - возвращает наименьшее значение Double, которое больше или равно его аргументу и равно целому числу (округление к большему)
 *
 * - round(x) - возвращает ближайшее значение Double, равное целому числу. Числа типа 3.5 или 4.5 округляются до ближайшего чётного целого числа.
 *
 * Кроме того, библиотека Math предоставляет константы:
 *
 * - E - является основанием натурального логарифма
 * - PI - представляет собой отношение длины окружности к ее диаметру
 */
fun mathLibrary() {
    println("--- Math library ---")

    println("ABS: ${abs(-10)}") // 10
    println("ABS Double: ${abs(-10.33)}") // 10.33

    println("Min: ${min(11, 81)}") // 11
    println("Max: ${max(20, 30)}") // 30

    println("Квадратный корень: ${sqrt(2.0)}") // 1.4142135623730951
    println("5^2: ${5.0.pow(2.0)}") // 25.0
    println("2^3: ${2.0.pow(3.0)}") // 8.0

    val e = E

    println("E: $e") // 2.718281828459045
    println("ln(E): ${ln(e)}") // 1.0
    println("Log 16(4): ${log(16.0, 4.0)}") // 2.0
    println("Log sum: ${ln(exp(2.0) * exp(3.0))}") // 5.0

    val pi = PI

    println("PI: $pi") // 3.141592653589793

    println("Sin: ${sin(pi / 2)}") // 1.0
    println("Cos: ${cos(pi)}") // -1.0
    println("Tan: ${tan(pi / 4)}") // 0.9999999999999999 (неточный результат)

    println("Гипотенуза: ${hypot(3.0, 4.0)}") // 5.0

    println("Floor 3.78: ${floor(3.78)}") // 3.0
    println("Floor -3.78: ${floor(-3.78)}") // -4.0

    println("Ceil 4.15: ${ceil(4.15)}") // 5.0
    println("Ceil -4.15: ${ceil(-4.15)}") // -4.0

    println("Round 4.15: ${round(4.15)}") // 4.0
    println("Round 4.15 to Int: ${round(4.15).toInt()}") // 4
    println("Round 3.5: ${round(3.5)}") // 4.0
    println("Round 4.5: ${round(4.5)}") // 4.0
    println("Round 4.75: ${round(4.75)}") // 5.0

    /**
     * Как известно, стороны равностороннего треугольника имеют одинаковую длину, а все углы равны 60°.
     *
     * Попробуем проверить это с помощью закона косинусов: c^2 = a^2 + b^2 − 2ab * cos(γ)
     * где a и b — стороны треугольника, а γ — угол между ними
     */
    val a = 6.0
    val b = 6.0

    val angle = 60
    val radianAngle = angle * PI / 180 // cos требует угла в радианах

    val c = sqrt(a.pow(2.0) + b.pow(2.0) - 2 * a * b * cos(radianAngle))

    println("Сторона треугольника: $c") // 5.999999999999999, неточный, но правильный результат

    println(heronFormula(3, 4, 5)) // 6.0
}

/**
 * Вычисляет площадь треугольника по трём его сторонам!
 */
fun heronFormula(a: Int, b: Int, c: Int): Double {
    val semiPerimeter: Double = (a + b + c) / 2.0

    return sqrt(semiPerimeter * (semiPerimeter - a) * (semiPerimeter - b) * (semiPerimeter - c))
}

/**
 * Существует трёхзначное целое число (от 100 до 999).
 *
 * Найдите сумму его цифр.
 */
fun sumOfDigits() {
    val number: Int = readln().sumOf { it.digitToInt() }

    println(number)
}

/**
 * Мы будем рассматривать два момента времени, которые произошли в один и тот же день — часы, минуты и секунды.
 *
 * Известно, что второй момент произошёл не раньше первого. Найдите, сколько секунд прошло между двумя моментами.
 *
 * Программа получает три целых числа: часы, минуты, секунды первого момента и три целых числа второго момента.
 *
 * Выведите количество секунд между этими двумя моментами.
 */
fun timeDifference() {
    val daysAmount = 2
    val seconds: MutableList<Int> = MutableList(daysAmount) { 0 }

    repeat(daysAmount) { day ->
        println("Введите с новой строки часы, минуты, секунды:")

        repeat(3) {
            seconds[day] += readln().toInt() * 60.0.pow(2 - it).toInt()
        }
    }

    println(seconds.last() - seconds.first()) // 3661
}

import com.diogonunes.jcdp.color.ColoredPrinter
import com.diogonunes.jcdp.color.api.Ansi

fun main() {
    /**
     * Gradle — это современный инструмент автоматизации, который помогает создавать и управлять проектами, написанными на Java, Kotlin, Scala и других языках на основе JVM.
     *
     * Он описывает зависимости проекта и определяет, как построить проект. Gradle использует хорошо продуманную систему плагинов, поэтому это очень расширяемый инструмент. Вы можете использовать плагины для автоматического управления версиями, автоматического тестирования, создания отчётов о сборке и так далее.
     */

    /**
     * Ручная интерактивная инициализация проекта: gradle init
     * Инициализация проекта с флагами: gradle init --type application --language kotlin --dsl kotlin
     * Сборка проекта: gradle build или ./gradlew build
     * Список всех задач: gradle tasks --all  (можно увидеть все доступные действия с проектом)
     * Запуск задачи: gradle -q <task_name>
     * Запуск проекта: gradle run или gradle app:run
     * Создание JAR файла: gradle jar
     * Очистка проекта от сгенерированных артефактов: gradle clean
     */

    /**
     * Классический способ запустить приложение на основе JVM — использовать команду java -jar. Эту команду можно запустить без Gradle, вам нужно только заранее иметь JAR.
     *
     * файл JAR находится в каталоге app/build/libs
     *
     * java -jar app-1.0-SNAPSHOT.jar
     *
     * После сборки проекта создаются архивы в двух форматах, которые можно распространять:
     * app/build/distributions/app.jar и app/build/distributions/app.zip.
     */

    /**
     * Ключевые понятия Gradle: проекты и задачи.
     * - Проект может представлять собой либо что-то, что нужно создать (например, файл JAR или ZIP-архив), либо что-то, что нужно сделать (например, развёртывание приложения).
     * Каждая сборка Gradle содержит один или несколько проектов.
     * - Задача — это отдельная часть работы, которую выполняет сборка. Это может включать компиляцию классов, запуск тестов, создание документов и так далее. Каждый проект, по сути, представляет собой набор из одной или нескольких задач.
     *
     * В простых случаях сборка будет содержать только один проект с несколькими задачами.
     */

    /**
     * Для проектов Java и Kotlin рекомендуется включать название вашей организации в путь к файлам исходного кода в качестве имени пакета, например org.hyperskill.
     */

    /**
     * Базовая структура проекта
     * .
     * ├── build.gradle
     * ├── gradle
     * │   └── wrapper
     * │       ├── gradle-wrapper.jar
     * │       └── gradle-wrapper.properties
     * ├── gradlew
     * ├── gradlew.bat
     * └── settings.gradle
     *
     * Файл build.gradle — это основной файл, в котором указан проект Gradle, включая его задачи и внешние библиотеки.
     *
     * Файлы gradle-wrapper.jar, gradle-wrapper.properties, gradlew и gradlew.bat принадлежат Gradle Wrapper, что позволяет запускать Gradle без его ручной установки.
     *
     * Файл settings.gradle указывает, какие проекты включить в сборку. Этот файл необязателен для сборки, состоящей только из одного проекта, но обязателен для сборки с несколькими проектами.
     */

    /**
     * build.gradle.kts
     *
     * Раздел plugins добавляет некоторые плагины для расширения возможностей проекта: например, для добавления новых задач или свойств.
     *
     * Официальная страница плагинов: https://plugins.gradle.org/
     *
     * В разделе repositories объявляются места, из которых будут загружены зависимости и добавлены в проект.
     *
     * Общедоступных репозиториев предостаточно: JCenter, Maven Central, Google и другие. Обычно в описании зависимости указано, в каком репозитории она содержится.
     *
     * Раздел dependencies используется для добавления внешних библиотек в проект. Gradle автоматически скачает их из репозиториев и положит в архив с приложением.
     *
     * Пример кастомной задачи
     *
     * tasks.register("helloGradle") {
     *     doLast {
     *         println("Hello, Gradle!")
     *     }
     * }
     *
     * Terminal: gradle -q helloGradle
     * Output: Hello, Gradle!
     *
     * Раздел application - используется для настроек подключаемых модулей приложения, благодаря которым приложение запускается с помощью команды gradle run.
     * Свойство mainClass определяет класс с точкой входа приложения.
     */

    /**
     * dependencies
     *
     * В терминологии Gradle все внешние библиотеки называются зависимостями. Как правило, они упакованы в файлы JAR. Gradle может автоматически загружать их и добавлять в проект. Это экономит много времени и решает возможные конфликты между версиями библиотек.
     *
     * Добавление зависимостей:
     * - Определите репозиторий, в котором нужно искать зависимости.
     * - Определите зависимость, которую вы хотите включить в свой проект
     *
     * Существуют различные возможные форматы репозиториев:
     * 1. совместимый с Maven репозиторий (например, Maven Central, JCenter, Google)
     * 2. репозиторий, совместимый с Ivy
     * 3. локальные (flat) каталоги
     *
     * Gradle имеет четыре псевдонима, которые вы можете использовать при добавлении в проект репозиториев, совместимых с Maven.
     * 1. mavenCentral() извлекает зависимости из центрального репозитория Maven (https://mvnrepository.com/repos/central).
     *
     * 2. jcenter() извлекает зависимости из репозитория Bintray JCenter Maven (https://bintray.com/bintray/jcenter).
     *
     * 3. mavenLocal() извлекает зависимости из локального репозитория Maven.
     *
     * 4. google() извлекает зависимости из репозитория Google Maven (https://maven.google.com/web/index.html).
     *
     * Кроме того, вы можете просто загрузить нужные вам jar-файлы и поместить их в какой-либо каталог на вашем компьютере, обычно в папку libs вашего проекта. Это удобно, когда нужные вам банки недоступны в общедоступных репозиториях.
     *
     * repositories {
     *     mavenCentral()
     *     jcenter()
     *
     *     flatDir {
     *         dirs 'lib'
     *     }
     * }
     *
     * Добавление зависимостей
     *
     * Чтобы добавить новую зависимость в свой проект, сначала вам необходимо идентифицировать её по следующим атрибутам: группа, имя и версия.
     *
     * Если вы используете не Maven репозитории, некоторые атрибуты могут быть необязательными. Например, flat репозиторию нужны только имя и версия.
     *
     * Есть несколько способов найти эти атрибуты. Некоторые библиотеки перечисляют их на своём веб-сайте или в репозитории git. Кроме того, вы можете просто найти их в предпочитаемом вами репозитории.
     *
     * Все зависимости сгруппированы в именованный набор зависимостей, называемый конфигурациями.
     *
     * Каждый из них имеет разные характеристики и определяет следующие моменты:
     * - наличие зависимостей на шагах сборки
     * - необходимость включения зависимостей в окончательный артефакт сборки
     * - видимость зависимостей для программистов, которые используют ваш проект как библиотеку
     *
     * Плагины «java» и «kotlin» добавляют ряд этих конфигураций в ваш проект.
     *
     * Их четыре:
     * - implementation конфигурация означает, что зависимость доступна как во время компиляции, так и во время выполнения, и она не может быть раскрыта людям, которые используют ваш скомпилированный код в качестве внешней библиотеки в своих собственных проектах. Эта конфигурация считается стандартной.
     *
     * - compileOnly конфигурация используется для определения зависимостей, которые должны быть доступны только во время компиляции, но не нужны во время выполнения.
     *
     * - runtimeOnly используется для определения зависимостей, которые вам нужны только во время выполнения, а не во время компиляции.
     *
     * - api конфигурация аналогична implementation, но будет доступна программистам, которые используют ваш скомпилированный код в качестве библиотеки в своих проектах.
     *
     * Также существуют такие же конфигурации, только с префиксом test (например, testImplementation). Поскольку тесты компилируются и запускаются отдельно и не включаются в окончательный JAR (как и их зависимости), у них есть собственный набор зависимостей. Это помогает уменьшить размер JAR, что особенно полезно при разработке для Android.
     *
     * Когда мы решили какие зависимости нам нужны и определились с их конфигурациями, мы готовы добавить их в наш build.gradle.
     *
     * dependencies {
     *     // Эта зависимость используется приложением
     *     implementation("com.google.guava:guava:31.1-jre")
     *
     *     // Использует фреймворк для тестирования JUnit только для тестов
     *     testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.2")
     *     testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
     *
     *     // Нужно только при компиляции приложения
     *     compileOnly("org.projectlombok:lombok:1.18.4")
     *
     *     // Нужно только в runtime
     *     testRuntimeOnly("org.junit.platform:junit-platform-launcher")
     * }
     *
     * После добавления зависимостей в файл build.gradle вы можете использовать библиотеки в своем исходном коде, но не забудьте их импортировать.
     */

    /**
     * В качестве примера использования внешних библиотек рассмотрим программу JCDP, печатающую цветные текстовые сообщения.
     *
     * implementation("com.diogonunes:JCDP:4.0.2")
     */
    colorfulWorld()

    /**
     * Если вы хотите запустить это приложение в терминале, у вас есть два варианта:
     *
     * 1. Вы можете запустить команду gradle jar для создания файла jar, а затем загрузить и поместить jar библиотеки JCDP в тот же каталог, что и app.jar.
     *
     * После этого вы можете запустить приложение в этом каталоге, добавив классы библиотеки в путь к классам:
     * java -cp "*" org.hyperskill.gradleapp.App
     *
     * 2. Добавьте эти строки в файл build.gradle:
     *
     * jar {
     *     manifest {
     *         attributes('Main-Class': 'org.hyperskill.gradleapp.App')
     *     }
     *
     *     from {
     *         configurations.runtimeClasspath
     *                 .findAll { it.name.endsWith('jar') }
     *                 .collect { zipTree(it) }
     *     }
     * }
     *
     * Затем запустите gradle jar, чтобы собрать артефакт.
     *
     * Для запуска приложения: java -jar app.jar
     */
}

fun colorfulWorld() {
    val printer = ColoredPrinter.Builder(1, false).build()

    printer.print(" Hello, colorful world! ",
        Ansi.Attribute.BOLD, Ansi.FColor.MAGENTA, Ansi.BColor.YELLOW)
}

/**
 * S - Single Responsibility Principle (SRP, принцип единой ответственности)
 *
 * Должны ли наши программы быть многозадачными? Противоречит ли эта идея правилу «делай одно дело за раз»?
 *
 * Хотя кажется, что смартфон делает много вещей одновременно, это всего лишь иллюзия. Они слишком быстры, чтобы мы могли заметить, что они одновременно выполняют одну задачу на каждом процессорном модуле.
 *
 * Отвечая на первый вопрос о многозадачности: да. Ваша программа должна делать то, что должна, независимо от количества параллельных задач. Это кажется разумным, потому что именно так мы создаём сложное приложение.
 *
 * Ответ на второй вопрос – нет. В качестве примера возьмём любое приложение по вашему выбору. Вы ожидаете каких-то действий от каждой его части и не хотите, чтобы эти части делали больше, чем нужно. Как это применимо к процессу разработки?
 *
 * Программа состоит из некоторых программных единиц, таких как модули, классы и функции. Принцип единой ответственности требует, чтобы у вашего программного подразделения была только одна причина для изменений (т.е. одна ответственность). Если вы как разработчик меняете меню программы, это не должно влиять на работу других частей программы.
 *
 * Представьте, что мы работаем над новым приложением для смартфонов. Оно имеет такие функции, как будильник, напоминания и секундомер. Поскольку все они связаны со временем, их можно объединить в один класс.
 *
 * Когда мы добавим возможность выбирать мелодию для будильника, сможем ли мы использовать её и для секундомера? А если мы добавим возможность сохранять 5 лучших результатов по секундомеру, как мы сможем использовать эту функцию для напоминаний? Пытаясь собрать воедино похожие функции, мы вместо этого создаем объект Бога.
 *
 * Объект Бога — это объект, который знает слишком много или делает слишком много.
 *
 * В нашем случае лучше изолировать эти три функции друг от друга, чтобы мы могли обновлять их независимо, не засоряя код лишними деталями. Каждая часть будет отвечать за определённую задачу и не будет знать, что делают другие.
 *
 * Такая конструкция с большей вероятностью сохранит код чистым и понятным. Давайте посмотрим, как мы можем организовать это ещё лучше.
 *
 * Границы ответственности
 *
 * Решаем добавить возможность выбора мелодии для будильника. Мы добавляем методы LIST_TUNES, SET_TUNE и PLAY_TUNE в класс ALARM_CLOCK.
 *
 * Пользователи начинают скачивать приложение и в отзывах упоминают, что было бы здорово сделать так, чтобы мелодия звучала громче при включении будильника.
 *
 * Мы добавляем метод SET_ENHANCING_MODE, но затем замечаем, что в одном классе мы перепутали методы для разных обязанностей: установка мелодий (setting tunes), настройка громкости (setting volume).
 *
 * На этот раз у нашего класса есть как минимум три причины для перемен:
 *
 * - методы времени
 * - методы громкости
 * - методы мелодий
 *
 * Хотим ли мы, чтобы обновление методов громкости испортило работу методов времени? Конечно, нет.
 *
 * Нам следует разделить класс на несколько частей и делегировать обязанности.
 *
 * Вы можете спросить, а что тогда будет делать ALARM_CLOCK? Ответ прост: он будет вызывать другие классы и организовывать их работу в зависимости от запроса пользователя.
 *
 * Теперь мы также можем повторно использовать классы TUNE и VOLUME для напоминаний.
 *
 * Чтобы обозначить границы ответственности, спросите себя: это одни и те же обязанности для пользователя или нет? Если они одинаковы, свяжите методы вместе. Если это не так, разделите их, чтобы создать классы, у которых есть только одна причина для изменения.
 *
 * Суть принципа заключается не в разбиении кода на маленькие изолированные части. Вы собираете то, что относится к одной ответственности, в одном месте, а затем отделяете друг от друга подразделения с разными обязанностями.
 *
 * Принцип единой ответственности (SRP) не позволяет нам создавать объекты Бога и побуждает нас создавать классы, имеющие только одну причину для изменений.
 *
 * Вместо того чтобы собирать все методы в одном месте мы можем разделить их по разным обязанностям и использовать где угодно.
 */
